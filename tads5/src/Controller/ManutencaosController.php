<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;
use Cake\Http\Response;
use Cake\I18n\Date;
use Cake\I18n\DateTime;
use Cake\ORM\Exception\PersistenceFailedException;
use Exception;

class ManutencaosController extends AppController
{
    protected \Cake\Database\Connection $conexao;

    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->conexao = $this->Manutencaos->getConnection();
    }

    public function index(): Response
    {
        if (!$this->request->is('post')) {
            return $this->erro(400, 'Requisição não suportada.');
        }

        $dados = $this->request->getData();
        $query = $this->Manutencaos
            ->find()
            ->select([
                'id' => 'Manutencaos.id',
                'cnpj_fornecedor' => 'Fornecedors.cnpj',
                'nome_fornecedor' => 'Fornecedors.nome',
                'telefone_fornecedor' => 'Fornecedors.telefone',
                'modelo_veiculo' => 'Veiculos.modelo',
                'placa_veiculo' => 'Veiculos.placa',
                'nome_abreviado_fabricante' => 'Fabricantes.abreviado',
                'nota_fiscal' => 'Manutencaos.notaFiscal',
                'valor_manutencao' => 'Manutencaos.valor',
                'data_manutencao' => 'Manutencaos.data',
                'quantidade_pecas' => 'COUNT(*)',
            ])
            ->join([
                'table' => 'Fornecedors',
                'type' => 'INNER',
                'conditions' => 'Fornecedors.id = Manutencaos.fornecedor_id',
            ])
            ->join([
                'table' => 'Veiculos',
                'type' => 'INNER',
                'conditions' => 'Veiculos.id = Manutencaos.veiculo_id',
            ])
            ->join([
                'table' => 'Fabricantes',
                'type' => 'INNER',
                'conditions' => 'Fabricantes.id = Veiculos.fabricante_id',
            ])
            ->join([
                'table' => 'Item_Manutencaos',
                'type' => 'INNER',
                'conditions' => 'Item_Manutencaos.manutencao_id = Manutencaos.id',
            ])
            ->groupBy([
                'Manutencaos.id', 'Fornecedors.cnpj', 'Fornecedors.nome', 'Fornecedors.telefone', 'Veiculos.modelo', 'Veiculos.placa',
                'Fabricantes.abreviado', 'Manutencaos.notaFiscal', 'Manutencaos.valor', 'Manutencaos.data',
            ]);

        try {
            if (!empty($dados['data_inicial'])) {
                $query = $query->where(['data >= ' => new Date($dados['data_inicial'])], ['data' => 'date']);
            }

            if (!empty($dados['data_final'])) {
                $query = $query->where(['data <= ' => new Date($dados['data_final'])], ['data' => 'date']);
            }

            return $this->sucesso('Manutenções listadas com sucesso.', $query->toArray());
        }
        catch (Exception $e) {
            return $this->erro('Houve um erro ao listar as manutenções: ' . $e->getMessage());
        }
    }

    public function view(): Response
    {
        $id = $this->request->getData('id');

        if (!$id) {
            return $this->erro('Informe o código da manutenção para buscá-la.');
        }

        try {
            $manutencao = $this->Manutencaos->get($id, contain: ['ManutencaoItems']);
            return $this->sucesso('Manutenção encontrada.', $manutencao);
        }
        catch (RecordNotFoundException) {
            return $this->erro('Manutenção de código ' . $id . ' não encontrada.');
        }
        catch (Exception $e) {
            return $this->erro('Houve um erro ao consultar a manutenção: ' . $e->getMessage());
        }
    }

    public function add(): Response
    {
        if (!$this->request->is('post')) {
            return $this->erro('Requisição inválida.');
        }

        $dados = $this->request->getData();

        if (empty($dados)) {
            return $this->erro('Informe a manutenção a ser lançada.');
        }

        if (empty($dados['item_manutencaos'])) {
            return $this->erro('Deve haver ao menos uma peça vinculada à manutenção.');
        }

        try {
            $manutencao = $this->Manutencaos->newEmptyEntity();
            $manutencao = $this->Manutencaos->patchEntity($manutencao, $dados, [
                'associated' => ['ItemManutencaos']
            ]);

            $manutencao = $this->Manutencaos->saveOrFail($manutencao);

            return $this->sucesso('Manutenção lançada com sucesso', [
                'id' => $manutencao["id"]
            ]);
        }
        catch (PersistenceFailedException $e) {
            return $this->sucesso('Houve um ou mais erros ao lançar a manutenção.', $e->getAttributes());
        }
        catch (Exception $e) {
            return $this->sucesso('Houve um erro ao lançar a manutenção.', $e->getMessage());
        }
    }

    public function edit(): Response
    {
        if (!$this->request->is('post')) {
            return $this->erro('Requisição inválida.');
        }

        $dados = $this->request->getData();

        if (empty($dados)) {
            return $this->erro('Informe a manutenção a ser corrigida.');
        }

        if (empty($dados['id'])) {
            return $this->erro('Informe o código da manutenção a ser corrigida.');
        }

        if (empty($dados['manutencao_items'])) {
            return $this->erro('Deve haver ao menos uma peça vinculada à manutenção.');
        }

        $id = $dados['id'];
        $itemManutencao = $dados['manutencao_items'];

        try {
            $this->conexao->begin();
            $manutencao = $this->Manutencaos->get($id, contain: ['ItemManutencaos']);

            $idsManuPecas = array_filter(array_column($itemManutencao, 'id'));

            foreach ($manutencao->get("item_manutencaos") as $itemManutencao) {
                $vinculoIncluso = in_array($itemManutencao["id"], $idsManuPecas);

                if (!$vinculoIncluso) {
                    $this->ItemManutencaos->delete($itemManutencao);
                }
            }

            $manutencao = $this->Manutencaos->patchEntity($manutencao, $dados, [
               'associated' => ['ItemManutencaos']
            ]);

            $this->Manutencaos->saveOrFail($manutencao);
            $this->conexao->commit();

            return $this->sucesso('Manutenção corrigida com sucesso.');
        }
        catch (RecordNotFoundException) {
            $this->conexao->rollback();
            return $this->erro('Não existe uma manutenção com o código ' . $id . ' para ser corrigida.');
        }
        catch (PersistenceFailedException $e) {
            $this->conexao->rollback();
            return $this->erro('Ocorreram um ou mais erros ao corrigir a manutenção.', $e->getAttributes());
        }
        catch (Exception $e) {
            $this->conexao->rollback();
            return $this->erro('Houve um erro ao corrigir a manutenção: ' . $e->getMessage());
        }
    }

    public function delete(): Response
    {
        if (!$this->request->is('post')) {
            return $this->erro('Tipo de requisição inválido.');
        }

        $id = $this->request->getData('id');

        if (!$id) {
            return $this->erro('Informe o código da manutenção a ser excluída.');
        }

        try {
            $manutencao = $this->Manutencaos->get($id);
            $this->Manutencaos->deleteOrFail($manutencao);
            return $this->sucesso('Manutenção excluída com sucesso.');
        }
        catch (RecordNotFoundException) {
            return $this->erro('Não existe uma manutenção com o código ' . $id . ' para ser excluída.');
        }
        catch (PersistenceFailedException $e) {
            return $this->erro('Ocorreram um ou mais erros ao excluir a manutenção.', $e->getAttributes());
        }
        catch (Exception $e) {
            return $this->erro('Houve um erro ao excluir a manutenção: ' . $e->getMessage());
        }
    }
}
