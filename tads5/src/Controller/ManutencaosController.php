<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;
use Cake\ORM\Exception\PersistenceFailedException;
use Exception;

class ManutencaosController extends AppController
{
    protected \Cake\Database\Connection $conexao;

   public function initialize(): void
   {
       parent::initialize(); // TODO: Change the autogenerated stub
       $this->conexao = $this->Manutencaos->getConnection();
   }

    public function index()
    {
        $query = $this->Manutencaos->find()
            ->contain(['Veiculos', 'Fornecedors']);
        $manutencaos = $this->paginate($query);

        $this->set(compact('manutencaos'));
    }

    public function view()
    {
        $response = null;
        $statusCode = 200;

        if (!$this->request->is('POST')) {
            return $this->gerarResposta(400, 'Requisição não suportada.');
        }

        if (empty($this->request->getData())) {
            $manutencaos = $this->fetchTable('Manutencaos');
            $response = $manutencaos
                ->find()
                ->select([
                    'cnpj_fornecedor' => 'Fornecedors.cnpj',
                    'nome_fornecedor' => 'Fornecedors.nome',
                    'telefone_fornecedor' => 'Fornecedors.telefone',
                    'modelo_veiculo' => 'Veiculos.modelo',
                    'placa_veiculo' => 'Veiculos.placa',
                    'nome_abreviado_fabricante' => 'Fabricantes.abreviado',
                    'nota_fiscal' => 'Manutencaos.notaFiscal',
                    'valor_manutencao' => 'Manutencaos.valor',
                    'data_manutencao' => 'Manutencaos.data',
                ])
                ->join([
                    'table' => 'Fornecedors',
                    'type' => 'INNER',
                    'conditions' => 'Fornecedors.id = Manutencaos.fornecedor_id',
                ])
                ->join([
                    'table' => 'Veiculos',
                    'type' => 'INNER',
                    'conditions' => 'Veiculos.id = Manutencaos.veiculo_id',
                ])
                ->join([
                    'table' => 'Fabricantes',
                    'type' => 'INNER',
                    'conditions' => 'Fabricantes.id = Veiculos.fabricante_id',
                ])
                ->toArray();
        } else {
            $id = $this->request->getData('id');
            $response = $this->Manutencaos
                ->find()
                ->where(['id' => $id])
                ->first();
        }

        return $this->gerarResposta($statusCode, $response);
    }

    public function add(): \Cake\Http\Response
    {
        $response = null;
        $statusCode = 200;

        if (!$this->request->is("post")) {
            return $this->gerarResposta(
                400,
                "Requisição inválida."
            );
        }

        $manutencao = $this->Manutencaos->newEmptyEntity();
        $dados = $this->request->getData();
        $pecas = $dados["pecas"];

        if (empty($pecas)) {
            return $this->gerarResposta(
                400,
                "Informe ao menos uma peça para a manutenção."
            );
        }

        $mensagemNaoEncontrado = "";
        $this->conexao->begin();

        try
        {
            $manutencao = $this->Manutencaos->patchEntity($manutencao, $dados);
            $this->Manutencaos->saveOrFail($manutencao);

            foreach($pecas as $peca) {
                $id = $peca["id"];
                $mensagemNaoEncontrado = "Peça com código " . $id . " não encontrada.";
                $pecaEntidade = $this->Pecas->get($id, contain: []);

                $pecaEntidade = $this->Pecas->patchEntity($pecaEntidade, $peca);
                $this->Pecas->saveOrFail($pecaEntidade);

                $manutencaoPeca = $this->Manupecas->newEmptyEntity();
                $this->Manupecas->patchEntity($manutencaoPeca, [
                    "manutencao_id" => $manutencao["id"],
                    "peca_id" => $peca["id"],
                ]);

                $this->Manupecas->saveOrFail($manutencaoPeca);
            }

            $this->conexao->commit();
            $response = "Manutenção lançada com sucesso.";
        }
        catch (RecordNotFoundException) {
            $statusCode = 400;
            $response = $mensagemNaoEncontrado;
            $this->conexao->rollback();
        }
        catch (PersistenceFailedException $e)
        {
            $statusCode = 400;
            $response = $e->getAttributes();
            $this->conexao->rollback();
        }

        return $this->gerarResposta($statusCode, $response);
    }

    public function edit()
    {
        if (!$this->request->is('post')) {
            return $this->gerarResposta(400, "Requisição inválida.");
        }

        $dados = $this->request->getData();

        if (empty($dados)) {
            return $this->gerarResposta(400, "Informe os parâmetros necessários.");
        }

        $mensagemNaoEncontrado = "";
        $this->conexao->begin();

        try {
            $id = $dados["id"];
            $mensagemNaoEncontrado = "Não existe uma manutenção com o código "
                . $id . " para ser corrigida.";
            $manutencao = $this->Manutencaos->get($id, contain: []);

            $manutencao = $this->Manutencaos->patchEntity(
                $manutencao,
                $dados,
            );

            $this->Manutencaos->saveOrFail($manutencao);

            return $this->gerarResposta(200, "Manutenção corrigida com sucesso.");
        }
        catch (RecordNotFoundException) {
            $this->conexao->rollback();
            return $this->gerarResposta(400, $mensagemNaoEncontrado);
        }
        catch (PersistenceFailedException $e) {
            $this->conexao->rollback();
            return $this->gerarResposta(400, $e->getAttributes());
        }
        catch (Exception $e) {
            $this->conexao->rollback();
            return $this->gerarResposta(400, $e->getMessage());
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Manutencao id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete()
    {
        if (!$this->request->is('post')) {
            return $this->gerarResposta(400, "Tipo de requisição inválido.");
        }

        $id = $this->request->getData("id");

        try {
            $manutencao = $this->Manutencaos->get($id);
            $this->Manutencaos->deleteOrFail($manutencao);
        }
        catch (RecordNotFoundException) {

        }
        catch (PersistenceFailedException $e) {

        }

    }
}
