<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Database\Exception\DatabaseException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;
use Cake\I18n\Date;
use Cake\I18n\DateTime;
use Cake\ORM\Exception\PersistenceFailedException;
use Exception;

class ManutencaosController extends AppController
{
    protected \Cake\Database\Connection $conexao;

   public function initialize(): void
   {
       parent::initialize(); // TODO: Change the autogenerated stub
       $this->conexao = $this->Manutencaos->getConnection();
   }

    public function index()
    {
        $msgNaoEncontrado = '';

        try {
            $dados = $this->request->getData();

            if (empty($dados)) {
                return $this->gerarResposta(400, 'Dados ausentes.');
            }

            $id = $this->request->getData('id');

            if (!$id) {
                return $this->gerarResposta(400, 'Informe o código da manutenção para buscá-la.');
            }

            $mensagem = 'Manutenção de código ' . $id . ' não encontrada.';
            $manutencao = $this->Manutencaos->get($id, contain: [
                'ManuPecas.Pecas'
            ]);

            return $this->gerarResposta(200, $manutencao);
        }
        catch (RecordNotFoundException $e) {
            return $this->gerarResposta(400, $msgNaoEncontrado);
        }
        catch (Exception $e) {
            return $this->gerarResposta(400, $e->getMessage());
        }
    }

    public function view()
    {
        if (!$this->request->is('post')) {
            return $this->gerarResposta(400, 'Requisição não suportada.');
        }

        $dados = $this->request->getData();

        $dataInicial = null;
        $dataFinal = null;

        if (!empty($dados['data_inicial'])) {
            $dataInicial = $dados['data_inicial'];
        }

        if (!empty($dados['data_final'])) {
            $dataFinal = $dados['data_inicial'];
        }

        try {
            $manutencaos = $this->fetchTable('Manutencaos');
            $query = $manutencaos
                ->find()
                ->select([
                    'cnpj_fornecedor' => 'Fornecedors.cnpj',
                    'nome_fornecedor' => 'Fornecedors.nome',
                    'telefone_fornecedor' => 'Fornecedors.telefone',
                    'modelo_veiculo' => 'Veiculos.modelo',
                    'placa_veiculo' => 'Veiculos.placa',
                    'nome_abreviado_fabricante' => 'Fabricantes.abreviado',
                    'nota_fiscal' => 'Manutencaos.notaFiscal',
                    'valor_manutencao' => 'Manutencaos.valor',
                    'data_manutencao' => 'Manutencaos.data',
                ])
                ->join([
                    'table' => 'Fornecedors',
                    'type' => 'INNER',
                    'conditions' => 'Fornecedors.id = Manutencaos.fornecedor_id',
                ])
                ->join([
                    'table' => 'Veiculos',
                    'type' => 'INNER',
                    'conditions' => 'Veiculos.id = Manutencaos.veiculo_id',
                ])
                ->join([
                    'table' => 'Fabricantes',
                    'type' => 'INNER',
                    'conditions' => 'Fabricantes.id = Veiculos.fabricante_id',
                ]);

            if ($dataInicial) {
                $query = $query->where(['data >= ' => new Date($dataInicial)], ['data' => 'date']);
            }

            if ($dataFinal) {
                $query = $query->where(['data <= ' => new Date($dataFinal)], ['data' => 'date']);
            }

            return $this->gerarResposta(200, $query->toArray());
        }
        catch (Exception $e) {
            return $this->gerarResposta(400, $e->getMessage());
        }
    }

    public function add(): \Cake\Http\Response
    {
        if (!$this->request->is('post')) {
            return $this->gerarResposta(400, 'Requisição inválida.');
        }

        $dados = $this->request->getData();

        if (empty($dados)) {
            return $this->gerarResposta(400, 'Informe a manutenção a ser lançada.');
        }

        $manuPecas = $dados["manu_pecas"];

        if (empty($manuPecas)) {
            return $this->gerarResposta(400, 'Deve haver ao menos uma peça vinculada à manutenção.');
        }

        try {
            $manutencao = $this->Manutencaos->newEmptyEntity();
            $manutencao = $this->Manutencaos->patchEntity($manutencao, $dados, [
                'associated' => ['ManuPecas']
            ]);

            $manutencao = $this->Manutencaos->saveOrFail($manutencao);
            return $this->gerarResposta(200, ['id' => $manutencao["id"]]);
        }
        catch (PersistenceFailedException $e) {
            return $this->gerarResposta(400, $e->getAttributes());
        }
    }

    public function edit()
    {
        if (!$this->request->is('post')) {
            return $this->gerarResposta(400, 'Requisição inválida.');
        }

        $dados = $this->request->getData();

        if (empty($dados)) {
            return $this->gerarResposta(400, 'Informe a manutenção a ser corrigida.');
        }

        if (empty($dados['id'])) {
            return $this->gerarResposta(400, 'Informe o código da manutenção a ser corrigida.');
        }

        if (empty($dados['manu_pecas'])) {
            return $this->gerarResposta(400, 'Deve haver ao menos uma peça vinculada à manutenção.');
        }

        $id = $dados['id'];
        $manuPecas = $dados['manu_pecas'];

        $mensagemNaoEncontrado = '';
        $this->conexao->begin();

        try {
            $mensagemNaoEncontrado = 'Não existe uma manutenção com o código '
                . $id . ' para ser corrigida.';
            $manutencao = $this->Manutencaos->get($id, contain: ['ManuPecas']);

            $idsPecas = array_filter(array_column($manuPecas, 'id'));

            foreach ($manutencao->get("manu_pecas") as $manuPeca) {
                debug($manuPeca);
                // TODO: implementar inserção, atualização e exclusão sincronizada
            }

            exit;




            $manutencao = $this->Manutencaos->patchEntity(
                $manutencao,
                $dados,
            );

            $this->Manutencaos->saveOrFail($manutencao);

            return $this->gerarResposta(200, 'Manutenção corrigida com sucesso.');
        }
        catch (RecordNotFoundException) {
            $this->conexao->rollback();
            return $this->gerarResposta(400, $mensagemNaoEncontrado);
        }
        catch (PersistenceFailedException $e) {
            $this->conexao->rollback();
            return $this->gerarResposta(400, $e->getAttributes());
        }
        catch (Exception $e) {
            $this->conexao->rollback();
            return $this->gerarResposta(400, $e->getMessage());
        }
    }

    public function delete()
    {
        if (!$this->request->is('post')) {
            return $this->gerarResposta(400, 'Tipo de requisição inválido.');
        }

        $id = $this->request->getData('id');

        try {
            $manutencao = $this->Manutencaos->get($id);
            $this->Manutencaos->deleteOrFail($manutencao);
        }
        catch (RecordNotFoundException) {

        }
        catch (PersistenceFailedException $e) {

        }

    }
}
