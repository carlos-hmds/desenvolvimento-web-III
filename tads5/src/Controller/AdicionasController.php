<?php

namespace App\Controller;

use Cake\ORM\Exception\PersistenceFailedException;
use Exception;

class AdicionasController extends AppController
{
    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function addUser()
    {
        $response = null;
        $statusCode = 200;

        if ($this->request->is("post"))
        {
            $user = $this->Users->newEmptyEntity();
            $dados = $this->request->getData();

            $user = $this->Users->patchEntity($user, $dados);

            try
            {
                $this->Users->saveOrFail($user);
                $response = "Usuário adicionado com sucesso.";

                $mensagem = "<h1>Eba!</h1><br>Seu usuário do TADS5 foi criado com sucesso.";

                $this->enviarEmail(destinatario: $user["email"], mensagem: $mensagem, assunto: "Seja bem vindo ao sistema do TADS5!");
            }
            catch (PersistenceFailedException $e)
            {
                $statusCode = 400;
                $response = $e->getAttributes();
            }
            catch (Exception $e) {
                $statusCode = 400;
                $response = "Houve um erro: " . $e->getMessage();
            }
        }
        else
        {
            $statusCode = 400;
            $response = "Parâmetros de requisição inválidos: faltam os dados da entidade.";
        }

        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '+')
            ->withStatus($statusCode)
            ->withType('aplication/json')
            ->withStringBody(json_encode($response));
    }

    public function addServico()
    {
        $response = null;
        $statusCode = 200;

        if ($this->request->is("post"))
        {
            $servico = $this->Servicos->newEmptyEntity();
            $dados = $this->request->getData();

            $servico = $this->Servicos->patchEntity($servico, $dados);

            try
            {
                $this->Servicos->saveOrFail($servico);
                $response = "Serviço adicionado com sucesso.";
            }
            catch (PersistenceFailedException $e)
            {
                $statusCode = 400;
                $response = $e->getAttributes();
            }
        }
        else
        {
            $statusCode = 400;
            $response = "Parâmetros de requisição inválidos: faltam os dados da entidade.";
        }

        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '+')
            ->withStatus($statusCode)
            ->withType('aplication/json')
            ->withStringBody(json_encode($response));
    }

    public function addFornecedor()
    {
        $response = null;
        $statusCode = 200;

        if ($this->request->is("post"))
        {
            $fornecedor = $this->Fornecedores->newEmptyEntity();
            $dados = $this->request->getData();

            $fornecedor = $this->Fornecedores->patchEntity($fornecedor, $dados);

            try
            {
                $this->Fornecedores->saveOrFail($fornecedor);
                $response = "Fornecedor adicionado com sucesso.";
            }
            catch (PersistenceFailedException $e)
            {
                $statusCode = 400;
                $response = $e->getAttributes();
            }
        }
        else
        {
            $statusCode = 400;
            $response = "Parâmetros de requisição inválidos: faltam os dados da entidade.";
        }

        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '+')
            ->withStatus($statusCode)
            ->withType('aplication/json')
            ->withStringBody(json_encode($response));
    }

    public function addPeca()
    {
        $response = null;
        $statusCode = 200;

        if ($this->request->is("post"))
        {
            $peca = $this->Pecas->newEmptyEntity();
            $dados = $this->request->getData();

            $peca = $this->Pecas->patchEntity($peca, $dados);

            try
            {
                $this->Pecas->saveOrFail($peca);
                $response = "Peça adicionada com sucesso.";
            }
            catch (PersistenceFailedException $e)
            {
                $statusCode = 400;
                $response = $e->getAttributes();
            }
        }
        else
        {
            $statusCode = 400;
            $response = "Parâmetros de requisição inválidos: faltam os dados da entidade.";
        }

        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '+')
            ->withStatus($statusCode)
            ->withType('aplication/json')
            ->withStringBody(json_encode($response));
    }

    public function addFabricante()
    {
        $response = null;
        $statusCode = 200;

        if ($this->request->is("post"))
        {
            $fabricante = $this->Fabricantes->newEmptyEntity();
            $dados = $this->request->getData();

            $fabricante = $this->Fabricantes->patchEntity($fabricante, $dados);

            try
            {
                $this->Fabricantes->saveOrFail($fabricante);
                $response = "Fabricante adicionado com sucesso.";
            }
            catch (PersistenceFailedException $e)
            {
                $statusCode = 400;
                $response = $e->getAttributes();
            }
        }
        else
        {
            $statusCode = 400;
            $response = "Parâmetros de requisição inválidos: faltam os dados da entidade.";
        }

        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '+')
            ->withStatus($statusCode)
            ->withType('aplication/json')
            ->withStringBody(json_encode($response));
    }

    public function addTipo()
    {
        $response = null;
        $statusCode = 200;

        if ($this->request->is("post"))
        {
            $tipo = $this->Tipos->newEmptyEntity();
            $dados = $this->request->getData();

            $tipo = $this->Tipos->patchEntity($tipo, $dados);

            try
            {
                $this->Tipos->saveOrFail($tipo);
                $response = "Tipo adicionado com sucesso.";
            }
            catch (PersistenceFailedException $e)
            {
                $statusCode = 400;
                $response = $e->getAttributes();
            }
        }
        else
        {
            $statusCode = 400;
            $response = "Parâmetros de requisição inválidos: faltam os dados da entidade.";
        }

        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '+')
            ->withStatus($statusCode)
            ->withType('aplication/json')
            ->withStringBody(json_encode($response));
    }

    public function addVeiculo()
    {
        $response = null;
        $statusCode = 200;

        if ($this->request->is("post"))
        {
            $veiculo = $this->Veiculos->newEmptyEntity();
            $dados = $this->request->getData();

            $veiculo = $this->Veiculos->patchEntity($veiculo, $dados);

            try
            {
                $this->Veiculos->saveOrFail($veiculo);
                $response = "Veículo adicionado com sucesso.";
            }
            catch (PersistenceFailedException $e)
            {
                $statusCode = 400;
                $response = $e->getAttributes();
            }
        }
        else
        {
            $statusCode = 400;
            $response = "Parâmetros de requisição inválidos: faltam os dados da entidade.";
        }

        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '+')
            ->withStatus($statusCode)
            ->withType('aplication/json')
            ->withStringBody(json_encode($response));
    }

    public function addManutencao()
    {
        $response = null;
        $statusCode = 200;

        if ($this->request->is("post"))
        {
            $manuntencao = $this->Manutencaos->newEmptyEntity();
            $dados = $this->request->getData();

            $manuntencao = $this->Manutencaos->patchEntity($manuntencao, $dados);

            try
            {
                $this->Manutencaos->saveOrFail($manuntencao);
                $response = "Manutenção adicionada com sucesso.";
            }
            catch (PersistenceFailedException $e)
            {
                $statusCode = 400;
                $response = $e->getAttributes();
            }
        }
        else
        {
            $statusCode = 400;
            $response = "Parâmetros de requisição inválidos: faltam os dados da entidade.";
        }

        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '+')
            ->withStatus($statusCode)
            ->withType('aplication/json')
            ->withStringBody(json_encode($response));
    }

    public function addManupeca()
    {
        $response = null;
        $statusCode = 200;

        if ($this->request->is("post"))
        {
            $manupeca = $this->Manupecas->newEmptyEntity();
            $dados = $this->request->getData();

            $manupeca = $this->Manupecas->patchEntity($manupeca, $dados);

            try
            {
                $this->Manupecas->saveOrFail($manupeca);
                $response = "Peça vinculada à manutenção com sucesso.";
            }
            catch (PersistenceFailedException $e)
            {
                $statusCode = 400;
                $response = $e->getAttributes();
            }
        }
        else
        {
            $statusCode = 400;
            $response = "Parâmetros de requisição inválidos: faltam os dados da entidade.";
        }

        return $this->response
            ->withHeader('Access-Control-Allow-Origin', '+')
            ->withStatus($statusCode)
            ->withType('aplication/json')
            ->withStringBody(json_encode($response));
    }
}
